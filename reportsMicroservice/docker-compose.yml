services:
  app:
    image: 'reports:latest'
    build:
      context: .
    container_name: app3
    ports:
      - "8070:8070"
    networks:
      - spring-boot-network
    depends_on:
      - postgres

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reportsdb
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - spring-boot-network
    restart: unless-stopped
  rabbitmq:
    container_name: rabbitmq3
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      - spring-boot-network
networks:
  spring-boot-network:
    driver: bridge
  postgres:
    driver: bridge
  spring:
    driver: bridge


volumes:
  postgres:
  pgadmin: